#ifndef LIST_DOUBLE_LINK_H
#define LIST_DOUBLE_LINK_H

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>

#include "../../graphviz/src/graphviz.h" // The local path to the graphviz lib header
#include "../../graphviz/src/debugger.h" // The local path to the debugger
#include "struct.h"                      // 

// #include <chrono>    Included in order to check the time use of list sort
// #include <iostream>  Included in order to check the time use of list sort
// #include <stdbool.h> Included in order to check the time use of list sort 

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#define DEF_FUNC_NAME __func__  // This macro is used in order to get the name of the called function
#define DEF_FUNC_LINE __LINE__  // This macro is used in order to get the line from which the function was called
#define DEF_FUNC_FILE __FILE__  // This macro is used in order to get the file name from which the function was called

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

static const char* FILE_DUMP_NAME = "dump_log.txt"; // The name of the dump log file, can be changed

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

enum error_codes
{
    LIST_OK              = 0,
    ERR_OPEN_DUMP        = 1,
    ERR_CLOSE_DUMP       = 2,
    ERR_CALLOC_NODE_ARR  = 3,
    ERR_REALLOC_NODE_ARR = 4,
    ERR_LIST_FULL        = 5,
    ERR_LIST_EMPTY       = 6,
    ERR_RESIZE_NODE_ARR  = 7,
};

enum return_code
{
    REALLOC_TRUE         =  1,
    REALLOC_FALSE        =  2,
    IS_LINEAR            =  3,
    NODE_DOES_NOT_EXIST  = -4, // Is negative in order not confuse the existing node id with enum return
    NON_LINEAR           =  5,
};

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/**
 * @brief Creates the list's struct and initializes element of the list
 * 
 * @param number_of_nodes The number of the elements in the list in total
 * @return list* The pointer to the list struct
 */
list* list_ctor(size_t number_of_nodes);

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/**
 * @brief Pushes the new node after the existing one
 * 
 * @param list_str The pointer to the list struct
 * @param node_index The physical index of the node after which the new node will be pushed
 * @param value The value of the node
 */
void push_after(list* list_str, size_t node_index, node_val_type value);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/**
 * @brief 
 * 
 * @param list_str 
 */
void list_dtor(list* list_str);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


size_t list_realloc(list* list_ptr, size_t new_size);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


void push_before(list* list_ptr, size_t node_index, node_val_type value);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


size_t search_physical(list* list_ptr, int value);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


size_t search_logical(list* list_ptr, int value);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


size_t get_phys_by_log(list* list_ptr, int logical_index);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

size_t get_log_by_phys(list* list_ptr, int physical_index);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

void check_is_linear(list* list_ptr);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

size_t get_prev_free(list* list_ptr, int this_free_index);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

size_t make_linear(list* list_ptr);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

void put_to_free(list* list_ptr, int first_logical_index, int first_phys_index);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

void put_to_free(list* list_ptr, int first_logical_index, int first_node_phys);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

size_t put_tail(list* list_ptr);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


void exchange_neighbor(list* list_ptr, int first_node, int second_node);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


void exchange_stranger(list* list_ptr, int first_node, int second_node);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


size_t put_head(list* list_ptr);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


void change_head_tail(list* list_ptr, int head_id, int tail_id);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


void create_linear(list* list_ptr);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


size_t list_resize(list* list_ptr, size_t new_size);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

const char* enum_to_string(size_t error_code);
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#endif
